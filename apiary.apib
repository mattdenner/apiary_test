HOST: http://api.sanger.ac.uk/

--- Candidate test
---
Our [S2](http://github.com/sanger/lims-api) application supports, as near as possible, a RESTful JSON based API.  The API enables client applications to
only assume that they can access the root URL (`/`), with all other URLs being returned as an action within the JSON; a small concession is made for
clients that already know a UUID, in that they can access that directly, i.e. if the client knows the UUID of a tube is
`00000000-1111-2222-3333-444444444444`, then they are free to access the URL `/00000000-1111-2222-3333-444444444444` for the tube JSON directly.

This document describes a similar API and provides a [mock server](http://mattdenner.apiary.io) that you can connect to in order to complete the candidate test.

Your task is to implement a user interface that will enable a lab technician to record a tube-to-tube transfer.  Here is the behaviour required:

The lab technician needs to be able to scan in the barcode of a tube and have it be displayed on the screen.  Tubes that are empty should appear visually
different to those that have content in them.

The technician can then start a transfer between this source tube and a second target tube.  Starting the transfer should register a new tube in the
system, displaying it on the screen so that the technician can print out the barcode, but does not affect the contents of either tube.  It is only when
the technician finishes transferring the content from the source to the target tube, that they need to be able to record how much they transferred.

The mock server is configured to assume the following:

1. The source tube barcode is `SRC123456`;
2. The target tube barcode is `TRG123456`;
3. The volume tranferred from source to target tube is `100%`.

Do not hardcode these values into your solution as we will run your code against a system that is not bound by these restrictions.  Simply know that
these values are *all* that the mock server will respond to.  Also note that the barcodes are *not* UUIDs.

The interface should be implemented as a single HTML5 file, supported by Javascript: there is no CGI or server support available.  You can use any
Javascript framework you feel comfortable with, but you must not hardcode or assume the format of any URLs other than the root URL (`/`).
---

--
Root
The root URL (`/`) of the system always returns the initial set of behaviour.
--
GET /
> Accept: application/json
< 200
< Content-Type: application/json
{
  "search": {
    "actions": {
      "all": "/search/all",
      "first": "/search/first"
    }
  }
}

--
Searching
Searches are considered a resource that can be created, and hence respond to an HTTP POST request, and can either find one or more tubes.
Regardless of whether a search is for a singular result, or many, the search always expects a `barcode` value to be sent in the body of
the request.

Searching for an individual tube by barcode will always, if it finds a match, redirect to the appropriate location.
--
POST /search/first
> Accept: application/json
> Content-Type: application/json
{
  "search": {
    "barcode": "SRC123456"
  }
}
< 301
< Location: /00000000-1111-0000-0000-000000000001

--

If a singular search does not find a match then a not found error is returned, and the body of the response contains details of any
error messages from the system
--
POST /search/first
> Accept: application/json
> Content-Type: application/json
{
  "search": {
    "barcode": "SRC654321"
  }
}
< 404
< Content-Type: application/json
{
  "error": {
    "message": "Barcode SRC654321 does not appear to exist"
  }
}

--

When searching for all tubes with a matching barcode, the body of the response is a "page" of results, meaning that it has an `actions`
element that describes the paging.  The actions that might be present are:

* `read` which is the URL to read this page of results;
* `first` and `last` are URLs for the first and last page of results, which may be the same for only one page;
* `next` and `previous` are URLs for the next and previous page, should the current page be one of may.

In all cases, the `tubes` element is an array of tube entries, obeying the same JSON structure as an individual tube.
--
POST /search/all
> Accept: application/json
> Content-Type: application/json
{
  "search": {
    "barcode": "SRC123456"
  }
}
< 201
< Content-Type: application/json
{
  "actions": {
    "read": "/11111111-0000-0000-0000-000000000000",
    "first": "/11111111-0000-0000-0000-000000000000",
    "last": "/11111111-0000-0000-0000-000000000000"
  },
  "tubes": [
    {
      "actions": {
        "read": "/00000000-1111-0000-0000-0000000000001",
        "transfer": "/00000000-1111-0000-0000-0000000000001/transfer",
        "change_state": "/00000000-1111-0000-0000-0000000000001/change_state"
      },
      "uuid": "00000000-1111-0000-0000-000000000001",
      "barcode": "SRC123456",
      "state": "done",
      "aliquots": [
        { "sample": "sample 1", "amount": 100 }
      ]
    }
  ]
}

--
Tubes
An individual tube has a representation that can be read and contains:

* `barcode` which is a unique barcode for the tube;
* `state` which is an enumeration of 'pending', 'started' or 'done';
* a number of aliquots that contain the name of a `sample` and the `amount` of that sample.

All actions that can be performed on a tube are given in the `actions` block, including:

* `read` which the URL to use to read the JSON representation of the tube;
* `transfer` which is a URL for transferring from one tube to another;
* `change_state` which is a URL for changing the state of a tube.

Note that the URLs for the actions are unstable, and may change, and certain actions may not be always available.
--
GET /00000000-1111-0000-0000-000000000001
> Accept: application/json
< 200
< Content-Type: application/json
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-0000-0000-0000000000001",
      "transfer": "/00000000-1111-0000-0000-0000000000001/transfer",
      "change_state": "/00000000-1111-0000-0000-0000000000001/change_state"
    },
    "uuid": "00000000-1111-0000-0000-000000000001",
    "barcode": "SRC123456",
    "state": "done",
    "aliquots": [
      { "sample": "sample 1", "amount": 100 }
    ]
  }
}

--
Extra stuff
You should not care about anything in this section, as it is here purely to enable the mock server to respond appropriately.
--
GET /00000000-1111-0000-0000-000000000002
> Accept: application/json
< 200
< Content-Type: application/json
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-0000-0000-0000000000002",
      "transfer": "/00000000-1111-0000-0000-0000000000002/transfer",
      "change_state": "/00000000-1111-0000-0000-0000000000002/change_state"
    },
    "uuid": "00000000-1111-0000-0000-000000000002",
    "barcode": "TRG123456",
    "state": "pending",
    "aliquots": [ ]
  }
}

--
--
GET /00000000-1111-0000-0000-000000000003
> Accept: application/json
< 200
< Content-Type: application/json
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-0000-0000-0000000000003",
      "transfer": "/00000000-1111-0000-0000-0000000000003/transfer",
      "change_state": "/00000000-1111-0000-0000-0000000000003/change_state"
    },
    "uuid": "00000000-1111-0000-0000-000000000003",
    "barcode": "SRC123456",
    "state": "done",
    "aliquots": [ ]
  }
}

--
--
GET /00000000-1111-0000-0000-000000000004
> Accept: application/json
< 200
< Content-Type: application/json
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-0000-0000-0000000000004",
      "transfer": "/00000000-1111-0000-0000-0000000000004/transfer",
      "change_state": "/00000000-1111-0000-0000-0000000000004/change_state"
    },
    "uuid": "00000000-1111-0000-0000-000000000004",
    "barcode": "TRG123456",
    "state": "started",
    "aliquots": [ ]
  }
}

--
--
GET /00000000-1111-0000-0000-000000000005
> Accept: application/json
< 200
< Content-Type: application/json
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-0000-0000-0000000000005",
      "transfer": "/00000000-1111-0000-0000-0000000000005/transfer",
      "change_state": "/00000000-1111-0000-0000-0000000000005/change_state"
    },
    "uuid": "00000000-1111-0000-0000-000000000005",
    "barcode": "TRG123456",
    "state": "started",
    "aliquots": [
      { "sample": "sample 1", "amount": 100 }
    ]
  }
}

--
--
GET /00000000-1111-0000-0000-000000000006
> Accept: application/json
< 200
< Content-Type: application/json
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-0000-0000-0000000000006",
      "transfer": "/00000000-1111-0000-0000-0000000000006/transfer",
      "change_state": "/00000000-1111-0000-0000-0000000000006/change_state"
    },
    "uuid": "00000000-1111-0000-0000-000000000006",
    "barcode": "TRG123456",
    "state": "done",
    "aliquots": [
      { "sample": "sample 1", "amount": 100 }
    ]
  }
}
