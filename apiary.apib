HOST: http://api.sanger.ac.uk/

--- Candidate test
---
Our [S2](http://github.com/sanger/lims-api) application supports, as near as possible, a RESTful JSON based API.  The API enables client applications to
only assume that they can access the root URL (`/`), with all other URLs being returned as an action within the JSON; a small concession is made for
clients that already know a UUID, in that they can access that directly, i.e. if the client knows the UUID of a tube is
`00000000-1111-2222-3333-444444444444`, then they are free to access the URL `/00000000-1111-2222-3333-444444444444` for the tube JSON directly.

This document describes the API and provides a [mock server](http://mattdenner.apiary.io) that you can connect to in order to complete the candidate test.

Your task is to implement a user interface that will enable a lab technician to record a tube-to-tube transfer.  Here is the behaviour required:

The lab technician needs to be able to scan in the barcode of a tube and have it be displayed on the screen.  Tubes that are empty should appear visually
different to those that have content in them.

The technician can then start a transfer between this source tube and a second target tube.  Starting the transfer should register a new tube in the
system, displaying it on the screen so that the technician can print out the barcode, but does not affect the contents of either tube.  It is only when
the technician finishes transferring the content from the source to the target tube, that they need to be able to record how much they transferred.

The mock server is configured to assume the following:

1. The source tube barcode is `SRC123456`;
2. The target tube barcode is `TRG123456`;
3. The volume tranferred from source to target tube is `100%`.

Do not hardcode these values into your solution as we will run your code against a system that is not bound by these restrictions.  Simply know that
these values are *all* that the mock server will respond to.  Also note that the barcodes are *not* UUIDs.

The interface should be implemented as a single HTML5 file, supported by Javascript: there is no CGI or server support available.  You can use any
Javascript framework you feel comfortable with, but you must not hardcode or assume the format of any URLs other than the root URL (`/`).
---

--
Root JSON
Clients of the API need only know about the root URL (`/`), all other URLs come from the JSON returned in responses.  There are potentially four actions
that are available on resources:

- `read` which responds to an HTTP GET and returns the JSON representation of the resource;
- `create` which responds to an HTTP POST, with an optional body of JSON data, and creates a new resource;
- `update` which responds to an HTTP PUT, with an optional body of JSON data, and updates an existing resource;
- `delete` which responds to an HTTP DELETE by deleting the resource.

At the root URL level, only `read` and `create` are typically available, as the others do not make sense in the context of *all* resources.
--
GET /
> Accept: application/json
< 200
< Content-Type: application/json
{
  "tube": {
    "actions": {
      "create": "/tubes",
      "read": "/tubes"
    }
  },
  "search": {
    "actions": {
      "create": "/search"
    }
  },
  "change_state": {
    "actions": {
      "create": "/change_state"
    }
  },
  "transfer": {
    "actions": {
      "create": "/transfer"
    }
  }
}

--
Tubes

--
GET /00000000-1111-2222-3333-000000000001
> Accept: application/json
< 200
< Content-Type: application/json
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-2222-3333-000000000001"
    },
    "uuid": "00000000-1111-2222-3333-000000000001",
    "barcode": "SRC123456",
    "state": "done",
    "aliquots": [
      { "sample": "sample 1", "amount": 200 }
    ]
  }
}

--
Searching for tubes by barcode

--
POST /search
> Accept: application/json
{
  "search": {
    "barcode": "SRC123456"
  }
}
< 301
< Location: /00000000-1111-2222-3333-000000000001
< Content-Type: application/json
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-2222-3333-000000000001"
    },
    "uuid": "00000000-1111-2222-3333-000000000001",
    "barcode": "SRC123456",
    "state": "done",
    "aliquots": [
      { "sample": "sample 1", "amount": 200 }
    ]
  }
}

--
Changing state of tubes

--
POST /change_state
> Accept: application/json
{
  "change_state": {
    "target": "00000000-1111-2222-3333-000000000002",
    "target_state": "started"
  }
}
< 201
< Content-Type: application/json
{
  "change_state": {
    "actions": {
    },
    "target": {
      "actions": {
        "read": "/00000000-1111-2222-3333-000000000002"
      }
    },
    "target_state": "started"
  }
}

--
Extra support
What follows are purely needed to manage the state of the system.  If you have followed the advice, and not hardcoded or assumed URL structure, then you
will not need to pass this point and everything you need is documented above.
--
GET /00000000-1111-2222-3333-000000000002
> Accept: application/json
< 200
< Content-Type: application/json
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-2222-3333-000000000002"
    },
    "uuid": "00000000-1111-2222-3333-000000000002",
    "barcode": "TRG123456",
    "state": "pending",
    "aliquots": []
  }
}
